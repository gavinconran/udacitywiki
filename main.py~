import os
import webapp2
from google.appengine.ext import db
from google.appengine.api import memcache
import jinja2
import random
import hashlib
import hmac
import errors
import string
import logging

SECRET = 'gavinconran'

def hash_str(s):
        return hmac.new(SECRET, s).hexdigest()

def make_secure_val(s):
        return "%s|%s" % (s, hash_str(s))

def check_secure_val(h):
        val = h.split('|')[0]
        if h == make_secure_val(val):
                return val
        
def make_salt():
    return ''.join(random.choice(string.letters) for x in xrange(5))
        
def make_pw_hash(name, pw, salt=None):
    if not salt:
        salt=make_salt()
    h = hashlib.sha256(name + pw + salt).hexdigest()
    return '%s,%s' % (h, salt)

def valid_pw(name, pw, h):
    salt = h.split(',')[1]
    return h == make_pw_hash(name, pw, salt)        

template_dir = os.path.join(os.path.dirname(__file__), "")
jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),
                               autoescape = True)

class Handler(webapp2.RequestHandler):
  def write(self, *a, **kw):
    self.response.out.write(*a, **kw)
    
  def render_str(self, template, **params):
    t = jinja_env.get_template(template)
    return t.render(params)
  
  def render(self, template, **kw):
    self.write(self.render_str(template, **kw))
    
  def set_cookie(self, user_name):
        cookie_val = make_secure_val(str(user_name))
        self.response.headers.add_header('Set-Cookie', 'userid=%s; Path=/' % cookie_val)
        self.redirect("/welcome")
    
  def loggedon(self):
    userid_cookie_str = self.request.cookies.get('userid')
    if userid_cookie_str:
        cookie_val = check_secure_val(userid_cookie_str)
        return cookie_val
    else:
        return False      
      
class MainPage(Handler):
    def get(self):
      allowEdit = self.loggedon()     
      p = db.GqlQuery("SELECT * "
                        "FROM Page "
                        "WHERE path =  '/' " 
                        "ORDER BY last_modified DESC "
                        "LIMIT 1"
                        ).get()
      
      if not p:
        page = Page(content = '<h2>Final!</h2>', path = PATH)
        page.put()  
      else:
        page = p           
      self.render("front.html", page = p, allowEdit = allowEdit) 
            
    def post(self):          
      self.redirect('/_edit')

class EditPage(Handler):
    def get(self):
        p = db.GqlQuery("SELECT * "
                        "FROM Page "
                        "WHERE path =  '/' " 
                        "ORDER BY last_modified DESC "
                        "LIMIT 1"
                             ).get()
                                                                       
        self.render("edit.html", content = p.content)
        
    def post(self):
        content = self.request.get('content').replace('\n', '<br>')
        page = Page(content = content, path = PATH) 
        page.put() 
        self.redirect('/')

class EditWikiPage(Handler):
    def get(self, path):
        page = db.GqlQuery("SELECT * FROM "
                        "Page WHERE path = :num "
                        "ORDER BY last_modified "
                        "DESC LIMIT 1", 
                        num=path 
                        ).get()  
                        
        if page:
          content = page.content
        else:
          content = None                                                               
        self.render("edit.html", content = content)
        
    def post(self, path):
        content = self.request.get('content').replace('\n', '<br>')
        page = Page(content = content, path = path) 
        page.put() 
        self.redirect('' + path)
        
             
class WikiPage(Handler):
    def get(self, path):
      allowEdit = self.loggedon()    
      page = db.GqlQuery("SELECT * FROM "
                        "Page WHERE path = :num "
                        "ORDER BY last_modified "
                        "DESC LIMIT 1", 
                        num=path 
                        ).get()  
                         
      if page:
          page = page
      else:
          page = None
      self.render("permalink.html", page = page, allowEdit = allowEdit)     
        
    def post(self, path):
        is_edit = self.request.POST.get('edit_post', None)
        history = self.request.POST.get('history', None)
        
        if is_edit:        
          self.redirect('/_edit' + path)   
        else:
          self.redirect('/history' + path)            
        
class HistoryWikiPage(Handler):
    def get(self, path):
      allowEdit = self.loggedon()    
      allPosts = db.GqlQuery("SELECT * FROM "
                        "Page WHERE path = :num "
                        "ORDER BY last_modified "
                        "DESC LIMIT 10", 
                        num=path 
                        ).run()  
      
      print type(allPosts)                   
      if not allPosts:
          allPosts = None
      self.render("history.html", allPosts = allPosts, allowEdit = allowEdit)     
      
    def post(self, path):
        is_edit = self.request.POST.get('edit_post', None)
        is_view = self.request.POST.get('view_post', None)
        
        if is_edit:        
          self.redirect('/_edit' + path)   
        else:
          self.redirect(path)                              
               
                       
class Signup(Handler):
    def get(self):    
      self.render("signon.html")
    
    def post(self):
      user_name = self.request.get('username')
      user_password = self.request.get('password')
      user_verify = self.request.get('verify')
      user_email = self.request.get('email')
    
      (count, params) = errors.GenerateErrorMessages(user_name, user_password, user_verify, user_email)
    
      if count == 0:
        user_db = db.GqlQuery("SELECT * FROM User WHERE name=:1", user_name) 
        user = user_db.get()
        if user:
          username_error = "That user already exists"
          self.render("signon.html", username_error = username_error)
        else:  
          user = User(name = user_name, password = make_pw_hash(user_name, user_password), email = user_email)
          user.put()
          # set cookie
          user_id=str(user.key().id())
          self.set_cookie(user_id)
      else:
        self.render("signon.html", **params)
      
class Logon(Handler):
    def get(self):
      self.render("logon.html")
    
    def post(self):
      user_name = self.request.get('username')
      user_password = self.request.get('password')
    
      user_db = db.GqlQuery("SELECT * FROM User WHERE name=:1", user_name) 
      user = user_db.get()
      if user:
        # set cookie
        user_id=str(user.key().id())
        self.set_cookie(user_id)
      else:  
        self.render("logon.html", logon_error = "Invalid user")
            
class Welcome(Handler):
    def get(self):  
      userid_cookie_str = self.request.cookies.get('userid')
      if userid_cookie_str:
        cookie_val = check_secure_val(userid_cookie_str)
        if cookie_val:
          user = User.get(db.Key.from_path('User', int(cookie_val)))
          self.render("welcome.html", username = user.name.capitalize(), loggedon=True)
        else:
          self.redirect('/signup')
      else:
        self.redirect('/signup')  
    
class Logout(Handler):
    def get(self):
      self.response.headers.add_header('Set-Cookie', "userid=deleted;  Expires=Thu, 01-Jan-1970 00:00:00 GMT")
      self.redirect('/logon')  
      
class User(db.Model):
      name = db.StringProperty(required = True)
      password = db.StringProperty(required = True)
      email = db.StringProperty()
      created = db.DateTimeProperty(auto_now_add = True)
      last_modified = db.DateTimeProperty(auto_now = True)
        
class Page(db.Model):
      content = db.TextProperty(required = True)
      path = db.StringProperty(required = True)
      created = db.DateTimeProperty(auto_now_add = True)
      last_modified = db.DateTimeProperty(auto_now = True)
      
      
PAGE_RE = r'(/(?:[a-zA-Z0-9_-]+/?)*)'      
APP = webapp2.WSGIApplication([('/signup/?', Signup),
                               ('/welcome', Welcome),
                               ('/logon/?', Logon),
                               ('/logout/?', Logout),
                               #('/wiki/_edit' + PAGE_RE, EditWikiPage),
                               #('/wiki' + PAGE_RE, WikiPage),
                               ('/_edit' + PAGE_RE, EditWikiPage),
                               ('/history' + PAGE_RE, HistoryWikiPage),
                               ('' + PAGE_RE, WikiPage)                         
                               ],
                              debug=True)
                              
                              
